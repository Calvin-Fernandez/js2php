var a = true;
====
$a = true;

----
var $ = 1;
====
$«24» = 1.0;

----
a = a || b;
====
$a = (is($or_ = $a) ? $or_ : $b);

----
x = a && a.b && a.b.c;
====
$x = (is($and_ = (is($and1_ = $a) ? get($a, "b") : $and1_)) ? get(get($a, "b"), "c") : $and_);

----
var a = function a() {
  return this;
};
====
$a = new Func("a", function($this_, $arguments) {
  return $this_;
});

----
var result = a('foo');
function a(x, y) {
  return x + y;
}
====
$a = new Func("a", function($this_, $arguments, $x = null, $y = null) {
  return x_plus($x, $y);
});
$result = call($a, "foo");

----
if (a) b();
====
if (is($a)) {
  call($b);
}

----
if (a) {}
====
if (is($a)) {
}

----
if (a)
  b();
else
  c();
====
if (is($a)) {
  call($b);
} else {
  call($c);
}

----
if (a)
  b();
else if (c)
  d();
else
  e();
====
if (is($a)) {
  call($b);
} else if (is($c)) {
  call($d);
} else {
  call($e);
}

----
var a = [1,,2];
====
$a = new Arr(1.0, Arr::$empty, 2.0);

----
for (var i = 0; i < 2; i++);
====
for ($i = 0.0; is($i < 2.0); $i++) {
}

----
for (i = 1, j = 2; a(), b(); false);
====
for ($i = 1.0, $j = 2.0; is(x_seq(call($a), call($b))); false) {
}

----
var a = 1, b = 2;
for (var i = 0, j = 1; i < 2; i++);
====
$a = 1.0; $b = 2.0;
for ($i = 0.0, $j = 1.0; is($i < 2.0); $i++) {
}

----
for (n in o) {}
====
foreach (keys($o) as $n) {
}

----
var e = true;
try {
  throw new Error('foo');
} catch(e) {
  assert(e instanceof Error);
}
assert(e === true);
====
$e = true;
try {
  throw new Ex(x_new($Error, "foo"));
} catch(Exception $e_1_) {
  if ($e_1_ instanceof Ex) $e_1_ = $e_1_->value;
  call($assert, x_instanceof($e_1_, $Error));
}
call($assert, $e === true);

----
function f() {
  return f;
}
====
$f = new Func("f", function($this_, $arguments) {
  $f = $arguments->callee;
  return $f;
});

----
a = {a: 1, undefined: undefined, null: null};
====
$a = new Object("a", 1.0, "undefined", $undefined, "null", Null::$null);

----
undefined = 1;
var f = function(undefined) {
  return undefined++;
}
====
$undefined_ = 1.0;
$f = new Func(function($this_, $arguments, $undefined = null) {
  return $undefined++;
});

----
function $() {
  this.foo += 1;
  return $;
}
====
$«24» = new Func("\$", function($this_, $arguments) {
  $«24» = $arguments->callee;
  set($this_, "foo", 1.0, "+=");
  return $«24»;
});

----
var a = [1, false, null, undefined, new Date(), a];
====
$a = new Arr(1.0, false, Null::$null, $undefined, x_new($Date), $a);

----
var a = function a() {
  console.log('foo');
  var x = 5;
  function b(y) {
    console.log(x - y);
    return a;
  }
}
====
$a = new Func("a", function($this_, $arguments) use (&$console) {
  $a = $arguments->callee;
  $b = new Func("b", function($this_, $arguments, $y = null) use (&$console, &$x, &$a) {
    call_method($console, "log", $x - $y);
    return $a;
  });
  call_method($console, "log", "foo");
  $x = 5.0;
});

----
var r = /ab\/(c|d)$/ig;
r.match(s);
====
$r = new RegExp("ab/(c|d)\$", "gi");
call_method($r, "match", $s);

----
(function() {
  var request = process.request;
  var response = process.response;
  var resHeaders = {
    'Content-Type': 'text/plain'
  };
  response.writeHead(200, 'OK', resHeaders);
  response.write(request.getMethod() + ' ' + request.getURL() + '\n');
  var reqHeaders = request.getHeaders();
  Object.keys(reqHeaders).forEach(function(key) {
    response.write(key + ': ' + reqHeaders[key] + '\n');
  });
  response.end();
})();
====
call(new Func(function($this_, $arguments) use (&$process, &$Object) {
  $request = get($process, "request");
  $response = get($process, "response");
  $resHeaders = new Object("Content-Type", "text/plain");
  call_method($response, "writeHead", 200.0, "OK", $resHeaders);
  call_method($response, "write", x_plus(x_plus(x_plus(call_method($request, "getMethod"), " "), call_method($request, "getURL")), "\n"));
  $reqHeaders = call_method($request, "getHeaders");
  call_method(call_method($Object, "keys", $reqHeaders), "forEach", new Func(function($this_, $arguments, $key = null) use (&$response, &$reqHeaders) {
    call_method($response, "write", x_plus(x_plus(x_plus($key, ": "), get($reqHeaders, $key)), "\n"));
  }));
  call_method($response, "end");
}));
