browserify transformer/transform.js --standalone Transformer -o demo/js/transformer.js
rsync -av ../js2php dev:~/

Divergence from JavaScript
  Cannot Implement:
    arguments.caller
  Not Implemented:
    "0" -> truthy
    function.length
    Implicitly setting globals
    eval or new Function(string)

Compiling:
  keyword literals: null -> Null::$null, undefined -> null
  {a: 1} -> new Object('a', 1)
  [1, 2] -> new Arr(1, 2)
  /abc/i -> new RegExp('abc', 'i')
  operators to functions (x_add, x_typeof, x_instanceof, x_or, x_and, x_eq)
  function () {} -> new Func(function() use (...) {})
  compute a function's `use` (lexical references) at compile time

Optimizations:
  functions can be instantiated like $Array->construct()


Array -> Arr
Boolean -> Bln
Buffer [todo]
Date
Error
Function -> Func
Number
Object
RegExp
String -> Str
--
Global -> GlobalObject
NaN
Null
--
Ex (exception wrapper)


class Thing { function __construct() { $args = func_get_args(); echo count($args) . "\n"; } }
new Thing(1, 2)
$Thing = new ReflectionClass('Thing');
$Thing->newInstanceArgs(array('a', 'b', 'c'))


<?php
mb_internal_encoding("UTF-8");
$string = '↗Զ';
$char = mb_substr($string, 0, 1);
var_dump(bin2hex($char)); //hex
var_dump(hexdec(bin2hex($char))); //decimal



------

use $HTTP_RAW_POST_DATA for multipart/form-data
use stream php://input for all else
use fopen, fread

$data = stream_get_contents(STDIN);
--OR--
while(!feof(STDIN)){
    $line = fgets(STDIN);
}
--
STDIN is just short for fopen("php://stdin", "r");


------

PHP Refactor

all variables and functions => $var
[] => array() --or-- new ArrayObject(array(), ArrayObject::ARRAY_AS_PROPS)
  or use getters/setters so $arr->{0} becomes $arr[0]
{} => createStdClass()
obj.prop => $obj->prop
obj[prop] => $obj->{$prop}
Obj.prop => Obj::prop
built-in functions organized into classes like:
Math.log(num) => Math::log($num)
String.length(str) => String::length($str) --or-- String(str).length => String::create($str)->length

